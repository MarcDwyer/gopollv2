
☐ Complete Backend @started(20-02-02 20:48)
    ✔ Set up Websocket Server @started(20-02-01 16:47) @done(20-02-01 16:47) @lasted(29s)
        Now using socketIO in order to use https://github.com/socketio/socket.io-redis for less abstraction
        second option WebSocket package: https://github.com/websockets/ws but would have to manually create rooms which is annoying
    ✔ Create Rooms @started(20-02-01 16:12) @done(20-02-02 22:01) @lasted(1d5h49m31s)
        Hub should have rooms in order to send data specific to what the client is viewing
    ✔ Hook up to Redis @started(20-02-03 01:12) @done(20-02-03 01:12) @lasted(35s)
    ✘ Set up subscriptions to keys using Redis and pipe the updates to the client @started(20-02-03 01:13) @cancelled(20-02-03 22:01) @wasted(20h48m15s)
      Read https://github.com/NodeRedis/node_redis to get this to work
    ☐ Set up websockets @started(20-02-04 03:02)
        Do I want to go extremely hard and do some kind of horizontal scaling?
        Must read more about redis sub/pub, not really understanding how it would work with my websockets 
        This is incredibly valuable to understand, in order to create a game in browser, I must know this
        https://socket.io/docs/using-multiple-nodes/
        ✔ Handle different message types @started(20-02-04 21:23) @done(20-02-05 00:22) @lasted(2h59m18s)
        ☐ When a user creates a poll, I should return the poll's ID than push it with react-router
    ✔ Package data to have a count property in each option @done(20-02-05 18:55)
        something like { polloption: "something", count: 10 }
        ☐ Every Poll should have ips of clients who have already voted on a poll @started(20-02-07 17:57)
        Create another redis client for this, where the key is the poll_id and the values are ip: boolean
        ☐ Add some type of error handling @started(20-02-07 17:57)
        ☐ Create Timeout func that deletes poll at x amount of hours
    
☐ Complete Frontend @started(20-02-02 20:49)
    ✔ Make homepage on frontend @started(20-02-01 16:48) @done(20-02-02 22:01) @lasted(1d5h13m58s)
    ☐ Make CreatePoll Component @started(20-02-02 20:31)
        PollOptions should render a new input if last Polloption has been filled.
        ✔ Use Formik for poll creation, to allow for easier form making and validation @started(20-02-04 03:00) @done(20-02-04 03:00) @lasted(51s)
            ☐ Implement some Yup validation schema

☐ Complete Redis DB @started(20-02-02 22:47)
Redis is being used in order to achieve horizontal scalability and quick changes to polls
    ✔ Start a Redis docker image @started(20-02-02 22:47) @done(20-02-02 22:58) @lasted(11m23s)
        https://hub.docker.com/_/redis/ 
        ✔ Make a redis.conf file @started(20-02-02 22:47) @done(20-02-02 22:47) @lasted(49s)
            Add requirepass to redis.config file in "./myredis"